Creamos el entorno donde *prueba* es la carpeta que se genera y prueba sería el entorno

	python -m venv prueba

activamos ese entorno-> en la terminal e ir poniendo lo siguiente

	cd prueba
	cd Scripts
	activate

cuando se activa el entorno se puede usar el gestor de paquetes, en este caso el gestor llamado pip, nos ubicamos en
la raiz, para instalar django en nuestro entorno virtual, tipeamos

	pip install django

siempre tener activado el entorno al momento de instalar cualquier paquete. Para corroborar que django y el entorno
estén funcionando bien

	pip freeze --local 

al instalar django trae unos paquetes por defecto pytz==2020.1 y sqlparse==0.4.1,
hasta este punto solo se ha instalado django, sigue crear un proyecto web 

para crear un proyecto hay que ir a la carpeta base, en este caso la carpeta base se llama python,
tener en cuenta que siempre hay que tener el entorno corriendo,  escribir

	django-admin startproject proyecto1

donde proyecto1 es nombre del proyecto, entramos en el directorio del proyecto creado

	cd proyecto1 
	python manage.py runserver

si se desea ejecutar el servidor en otro puerto 

	python manage.py runserver 7000

donde 7000 es el puerto definido, ya que por default ocupa 8000
Al separar el archivo setting en archivos para  base,localy prod al levantar el servidor se hace como:
	
	python manage.py runserver 7000 --settings=empleados.settings.local

Si no se desee poner todo el --settings=empleados.settings.local al levantar el entorno, se puede modificar el
archivo manage.py e indicar esa configuracion 

estando en C:\Users\ecituk\Documents\python\empleados\applications> podemos crear apps
la carpeta applications es una carpeta creada recientemente

	django-admin startapp departamento

donde departamento es el nombre de la app

Al tratar de instalar un paquete con pip y da el warning:

WARNING: You are using pip version 20.1.1; however, version 20.2.3 is available.
You should consider upgrading via the 
'c:\users\ecituk\documents\python\entornos\empleados\scripts\python.exe -m pip install --upgrade pip' command.

en la linea de comandos ejecutar y con ello se solventa el problema
	
	python -m pip install --upgrade pip


puesto que se pretende mejorar el sistema de templates, se requiere el paquete unipath, se instala de la siguiente
manera:

	pip install unipath

ejecuto migraciones al tener ya modelos creados, lo primero es para ver que todo lo que está en models esta correcto,


	python manage.py makemigrations
	python manage.py migrate

para acceder al administrador de django primero se puede procedera crear un superusuario con 
	
	python manage.py createsuperuser

el comando solicitará un nombre de usuario: ecituk
correo: ecitukcaamal@gmail.com
contraseña: 123456   que igual pedirá confirmar, puede que diga que la constraseña sea muy comun
a lo ultimo se de da yes


en postgress al pedir contraseña para el superusuario
	ecituk
el puerto 5432


Al abrir el sql shell de postgress se le da enter a los comando, hasta llegar a la parte que pide a contraseña
	 ecituk

y luego para crear la base de datos, se escribe el comando sql como la siguiente:
	 CREATE DATABASE dbempleado;

Ahora necesitamos un usuario que tenga permisos para modificar esta base de datos creada,
 para ello si aún no tenemos un usuario creado, lo creamos con:

    CREATE USER ecitukUser

Ahora que tenemos el usuario, debemos acceder a la base de datos que hemos creado 
y darle permisos a este usuario para que pueda modificar la Base De Datos, tipeamos

	\c dbempleado;

la consola dirá el mensaje:
Ahora está conectado a la base de datos «dbempleado» con el usuario «postgres».
dbempleado, seguimos dandole permisos al usuario con:
	
	ALTER ROLE ecitukUser WITH PASSWORD 'djangoapp';
	ALTER ROLE cituk WITH PASSWORD 'djangoapp';

Para lograr conectar desde django a Postgress

empleado
cituk
djangoapp


Para instalar una app de terceros como por ejemplo ckeditor
	
	pip install django-ckeditor

